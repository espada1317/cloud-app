name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  # GCP Auth settings
  CREDENTIALS_JSON: ${{ secrets.SERVICE_ACCOUNT_KEY }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  # GCP Artifact Repository settings
  REPOSITORY: cloud-app-repository
  GAR_LOCATION: europe-central2
  IMAGE: cloud-app-image
  # GCP Cluster Settings
  GKE_CLUSTER: cloud-app-cluster
  GKE_ZONE: europe-central2
  DEPLOYMENT_NAME: cloud-app-deployment

jobs:
  deploy-docker-image:
    name: Deploy Docker Image to GCP Artifact Repository
    runs-on: ubuntu-latest
    steps:

      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Authenticate with gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.CREDENTIALS_JSON }}

      - name: Install the gcloud cli
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          skip_install: false
          version: latest
          install_components: 'gke-gcloud-auth-plugin'

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./scripts/git_update.sh -v patch

      - name: Build and Push the Docker Image to Artifact Repository
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
          docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest .
          docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GIT_TAG .
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GIT_TAG

      - name: Deploy Cluster to GKE
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_ZONE
          
          sed -i "s/gar-location/$GAR_LOCATION/g" kubernetes/deployment.yaml
          sed -i "s/project-id/$PROJECT_ID/g" kubernetes/deployment.yaml
          sed -i "s/repository/$REPOSITORY/g" kubernetes/deployment.yaml
          sed -i "s/image-name/$IMAGE/g" kubernetes/deployment.yaml
          sed -i "s/image-version/$GIT_TAG/g" kubernetes/deployment.yaml
          
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl apply -f kubernetes/hpa.yaml

          ACCOUNT=$(gcloud info --format='value(config.account)')
          kubectl get clusterrolebinding owner-cluster-admin-binding && echo "ClusterRoleBinding already exists." || (ACCOUNT=$(gcloud info --format='value(config.account)') && kubectl create clusterrolebinding owner-cluster-admin-binding --clusterrole cluster-admin --user $ACCOUNT)
          kubectl get namespace monitoring && echo "Namespace 'monitoring' already exists." || kubectl create namespace monitoring

          kubectl create -f kubernetes/prometheus/clusterRole.yaml
          kubectl create -f kubernetes/prometheus/config-map.yaml
          kubectl create -f kubernetes/prometheus/prometheus-deployment.yaml
          kubectl create -f kubernetes/prometheus/prometheus-service.yaml --namespace=monitoring
